# user-management-app/helm/templates/deployment.yaml
# helm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
    spec:
      initContainers:
        - name: wait-for-db
          image: postgres:13-alpine
          command: ['sh', '-c', 
            'until pg_isready -h {{ .Release.Name }}-postgresql -U postgres -d {{ .Values.postgresql.auth.database }}; do echo "Waiting for PostgreSQL..."; sleep 2; done']
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgres-password
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: FLASK_ENV
              value: {{ .Values.flask.env | default("production") | quote }}
            - name: FLASK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Chart.Name }}-secrets
                  key: flask-secret-key
            - name: DB_HOST
              value: "{{ .Release.Name }}-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ .Values.postgresql.auth.database | quote }}
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgres-password
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/src/instance
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Chart.Name }}-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


# # helm/templates/deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ .Chart.Name }}
#   labels:
#     app: {{ .Chart.Name }}
# spec:
#   replicas: {{ .Values.replicaCount }}
#   selector:
#     matchLabels:
#       app: {{ .Chart.Name }}
#   template:
#     metadata:
#       labels:
#         app: {{ .Chart.Name }}
#     spec:
#       containers:
#         - name: {{ .Chart.Name }}
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           ports:
#             - containerPort: 5000
#           env:
#             - name: FLASK_ENV
#               value: "production"
#             - name: DB_HOST
#               value: "{{ .Release.Name }}-postgresql"
#             - name: DB_PORT
#               value: "5432"
#             - name: DB_NAME
#               value: {{ .Values.postgresql.auth.database | quote }}
#             - name: DB_USER
#               value: {{ .Values.postgresql.auth.username | quote }}
#             - name: DB_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ .Release.Name }}-postgresql
#                   key: postgres-password
#           envFrom:
#             - configMapRef:
#                 name: {{ .Release.Name }}-config





# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ .Chart.Name }}
#   labels:
#     app: {{ .Chart.Name }}
# spec:
#   replicas: {{ .Values.replicaCount }}
#   selector:
#     matchLabels:
#       app: {{ .Chart.Name }}
#   template:
#     metadata:
#       labels:
#         app: {{ .Chart.Name }}
#     spec:
#       containers:
#         - name: {{ .Chart.Name }}
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           ports:
#             - containerPort: 5000
#           env:
#             - name: FLASK_ENV
#               value: "production"
